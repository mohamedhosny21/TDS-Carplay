name: Build iOS IPA Only

on:
  push:
    branches: [ main ]

env:
  XCODE_VERSION: latest
  TEAM_ID: C3Z5URCHGS
  API_KEY_ID: 23ZMF48P8Z
  API_KEY_ISSUER_ID: fcb8faeb-1e16-4bcd-9083-9186811c0262

jobs:
  build-ipa:
    name: Build and Export IPA
    runs-on: macos-latest
    
    environment:
      name: production
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure App Store Connect API Key
      run: |
        mkdir -p ~/private_keys
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > ~/private_keys/AuthKey_${{ env.API_KEY_ID }}.p8
        chmod 600 ~/private_keys/AuthKey_${{ env.API_KEY_ID }}.p8
        
    - name: Install Apple certificate and provisioning profiles
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      run: |
        # Create directories
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Decode certificate
        echo $BUILD_CERTIFICATE_BASE64 | base64 --decode > build_certificate.p12
        
        # Create keychain
        security create-keychain -p "$P12_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$P12_PASSWORD" build.keychain
        
        # Import certificate
        security import build_certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "$P12_PASSWORD" build.keychain
        
        # Install provisioning profiles
        echo $BUILD_PROVISION_PROFILE_BASE64 | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build_profile.mobileprovision
        
    - name: Generate ExportOptions.plist
      run: |
        cat <<EOF > ExportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>ad-hoc</string>
          <key>signingStyle</key>
          <string>manual</string>
          <key>teamID</key>
          <string>${{ env.TEAM_ID }}</string>
          <key>provisioningProfiles</key>
          <dict>
            <key>com.nft.colony.Video3</key>
            <string>Video3</string>
            <key>com.nft.colony.UploadVideo</key>
            <string>UploadVideo</string>
            <key>com.nft.colony.ScreenRec</key>
            <string>ScreenRec</string>
            <key>com.nft.colony.ScreenRecSetupUI</key>
            <string>ScreenRecSetupUI</string>
            <key>com.nft.colony.Carplayintent</key>
            <string>CarPlayIntent</string>
            <key>com.nft.colony.CarplayintentUI</key>
            <string>CarplayintentUI</string>
          </dict>
          <key>compileBitcode</key>
          <false/>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <false/>
        </dict>
        </plist>
        EOF
        
    - name: Build and Export IPA
      run: |
        set -exo pipefail
        
        # Clean build directory
        rm -rf build
        
        # Archive the project
        xcodebuild archive \
          -project "TDS Video.xcodeproj" \
          -scheme "TDS Video" \
          -archivePath build/ios/TDS_Video.xcarchive \
          -destination 'generic/platform=iOS' \
          -allowProvisioningUpdates \
          DEVELOPMENT_TEAM="${{ env.TEAM_ID }}" \
          CODE_SIGN_STYLE="Manual" \
          PROVISIONING_PROFILE_SPECIFIER="Video3" \
          PROVISIONING_PROFILE="ScreenRecSetupUI=ScreenRecSetupUI;ScreenRec=ScreenRec;Carplayintent=CarPlayIntent;CarplayintentUI=CarplayintentUI;UploadVideo=UploadVideo" \
          OTHER_CODE_SIGN_FLAGS="--keychain build.keychain" \
          SWIFT_OPTIMIZATION_LEVEL="-Onone"
        
        # Export the archive
        xcodebuild -exportArchive \
          -archivePath build/ios/TDS_Video.xcarchive \
          -exportPath build/ios/ipa \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates
        
        # List artifacts
        echo "Build artifacts:"
        ls -lR build/ios/ipa
        
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v3
      with:
        name: TDS-Video-IPA
        path: build/ios/ipa/*.ipa
        
    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain build.keychain
